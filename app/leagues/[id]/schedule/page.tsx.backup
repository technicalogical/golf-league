'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';

interface Team {
  id: string;
  name: string;
}

interface Course {
  id: string;
  name: string;
  par: number;
  location: string;
}

interface GeneratedMatch {
  team1_id: string;
  team2_id: string;
  week_number: number;
  course_id?: string;
  team1_name?: string;
  team2_name?: string;
}

interface WeekConfig {
  week_number: number;
  date: string;
  course_id: string;
  is_skipped: boolean;
  is_playoff: boolean;
  notes: string;
}

export default function GenerateSchedulePage() {
  const params = useParams();
  const router = useRouter();
  const leagueId = params.id as string;

  const [teams, setTeams] = useState<Team[]>([]);
  const [courses, setCourses] = useState<Course[]>([]);
  const [startDate, setStartDate] = useState('');
  const [doubleRoundRobin, setDoubleRoundRobin] = useState(false);
  const [defaultCourseId, setDefaultCourseId] = useState('');
  const [holesToPlay, setHolesToPlay] = useState<number>(18);
  const [nineSelection, setNineSelection] = useState<string>('front');
  const [teeSelection, setTeeSelection] = useState<string>('Blue');
  const [generatedSchedule, setGeneratedSchedule] = useState<GeneratedMatch[]>([]);
  const [weekConfigs, setWeekConfigs] = useState<WeekConfig[]>([]);
  const [currentStep, setCurrentStep] = useState<number>(1); // 1 = generate pairings, 2 = configure weeks
  const [loading, setLoading] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    loadData();
  }, [leagueId]);

  async function loadData() {
    try {
      // Fetch teams
      const teamsResponse = await fetch(`/api/leagues/${leagueId}/teams`);
      const teamsData = await teamsResponse.json();
      const teamsList = teamsData.map((lt: any) => lt.team);
      setTeams(teamsList);

      // Fetch courses
      const coursesResponse = await fetch('/api/courses');
      const coursesData = await coursesResponse.json();
      setCourses(coursesData);
      if (coursesData.length > 0) {
        setDefaultCourseId(coursesData[0].id);
      }

      // Calculate default weeks needed for round-robin
      if (teamsList.length >= 2) {
        const teamsCount = teamsList.length;
        const isOdd = teamsCount % 2 === 1;
        const rounds = isOdd ? teamsCount : teamsCount - 1;
        setWeeksCount(rounds);
      }
    } catch (err) {
      console.error('Error loading data:', err);
      setError('Failed to load data');
    } finally {
      setLoading(false);
    }
  }

  function generateRoundRobin(teamsList: Team[]): GeneratedMatch[] {
    if (teamsList.length < 2) {
      return [];
    }

    const teams = [...teamsList];
    const isOdd = teams.length % 2 === 1;

    // Add a "BYE" team if odd number of teams
    if (isOdd) {
      teams.push({ id: 'BYE', name: 'BYE' });
    }

    const n = teams.length;
    const rounds = n - 1;
    const matchesPerRound = n / 2;
    const schedule: GeneratedMatch[] = [];

    // Round-robin algorithm (circle method)
    for (let round = 0; round < rounds; round++) {
      const weekNumber = round + 1;

      for (let match = 0; match < matchesPerRound; match++) {
        let home, away;

        if (match === 0) {
          home = 0;
          away = n - 1;
        } else {
          home = match;
          away = n - match - 1;
        }

        // Rotate teams (except first team stays fixed)
        const homeIndex = (home + round) % (n - 1);
        const awayIndex = (away + round) % (n - 1);

        const team1 = home === 0 ? teams[0] : teams[homeIndex + 1];
        const team2 = away === 0 ? teams[0] : teams[awayIndex + 1];

        // Skip BYE matches
        if (team1.id !== 'BYE' && team2.id !== 'BYE') {
          schedule.push({
            team1_id: team1.id,
            team2_id: team2.id,
            week_number: weekNumber,
            team1_name: team1.name,
            team2_name: team2.name,
          });
        }
      }
    }

    // If double round-robin, add reverse fixtures
    if (doubleRoundRobin) {
      const secondHalf = schedule.map(match => ({
        team1_id: match.team2_id,
        team2_id: match.team1_id,
        week_number: match.week_number + rounds,
        team1_name: match.team2_name,
        team2_name: match.team1_name,
      }));
      return [...schedule, ...secondHalf];
    }

    return schedule;
  }

  function handleGenerate() {
    setError('');
    setSuccess('');
    setIsGenerating(true);

    try {
      const schedule = generateRoundRobin(teams);
      setGeneratedSchedule(schedule);

      // Calculate actual weeks needed
      const maxWeek = Math.max(...schedule.map(m => m.week_number));

      // Create initial week configurations
      const configs: WeekConfig[] = [];
      const startDateObj = startDate ? new Date(startDate) : new Date();

      for (let week = 1; week <= maxWeek; week++) {
        const weekDate = new Date(startDateObj);
        weekDate.setDate(startDateObj.getDate() + (week - 1) * 7);

        configs.push({
          week_number: week,
          date: weekDate.toISOString().split('T')[0],
          course_id: defaultCourseId,
          is_skipped: false,
          is_playoff: false,
          notes: '',
        });
      }

      setWeekConfigs(configs);
      setCurrentStep(2); // Move to step 2
      setSuccess(`Generated ${schedule.length} matches across ${maxWeek} weeks. Now configure each week.`);
    } catch (err: any) {
      setError(err.message || 'Failed to generate schedule');
    } finally {
      setIsGenerating(false);
    }
  }

  function updateWeekConfig(weekNumber: number, field: keyof WeekConfig, value: any) {
    setWeekConfigs(prev =>
      prev.map(config =>
        config.week_number === weekNumber
          ? { ...config, [field]: value }
          : config
      )
    );
  }

  async function handleSubmit() {
    setIsSubmitting(true);
    setError('');
    setSuccess('');

    if (generatedSchedule.length === 0) {
      setError('Please generate a schedule first');
      setIsSubmitting(false);
      return;
    }

    // Validate all non-skipped weeks have dates and courses
    const invalidWeeks = weekConfigs.filter(
      w => !w.is_skipped && (!w.date || !w.course_id)
    );
    if (invalidWeeks.length > 0) {
      setError('All non-skipped weeks must have a date and course selected');
      setIsSubmitting(false);
      return;
    }

    try {
      // Apply week configurations to matches
      const matchesWithConfig = generatedSchedule
        .map(match => {
          const weekConfig = weekConfigs.find(w => w.week_number === match.week_number);
          if (!weekConfig || weekConfig.is_skipped) {
            return null; // Skip this match
          }

          return {
            ...match,
            date: weekConfig.date,
            course_id: weekConfig.course_id,
            is_playoff: weekConfig.is_playoff,
            notes: weekConfig.notes,
          };
        })
        .filter(m => m !== null);

      const response = await fetch(`/api/leagues/${leagueId}/schedule`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          schedule: matchesWithConfig,
          holes_to_play: holesToPlay,
          nine_selection: holesToPlay === 9 ? nineSelection : null,
          tee_selection: teeSelection,
        }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Failed to create schedule');
      }

      setSuccess('Schedule created successfully!');
      setTimeout(() => {
        router.push(`/leagues/${leagueId}`);
      }, 1500);
    } catch (err: any) {
      setError(err.message);
      setIsSubmitting(false);
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-xl text-gray-600">Loading...</div>
      </div>
    );
  }

  if (teams.length < 2) {
    return (
      <div className="min-h-screen bg-gray-50">
        <header className="bg-white shadow">
          <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
            <Link
              href={`/leagues/${leagueId}`}
              className="text-blue-600 hover:text-blue-800 text-sm mb-2 block"
            >
              ← Back to League
            </Link>
            <h1 className="text-2xl font-bold text-gray-900">Generate Schedule</h1>
          </div>
        </header>
        <main className="max-w-4xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <p className="text-gray-600 mb-4">
              You need at least 2 teams in the league to generate a schedule.
            </p>
            <Link
              href={`/leagues/${leagueId}/teams/add`}
              className="text-blue-600 hover:text-blue-800 font-semibold"
            >
              Add Teams to League
            </Link>
          </div>
        </main>
      </div>
    );
  }

  // Group matches by week
  const matchesByWeek: { [key: number]: GeneratedMatch[] } = {};
  generatedSchedule.forEach(match => {
    if (!matchesByWeek[match.week_number]) {
      matchesByWeek[match.week_number] = [];
    }
    matchesByWeek[match.week_number].push(match);
  });

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
          <Link
            href={`/leagues/${leagueId}`}
            className="text-blue-600 hover:text-blue-800 text-sm mb-2 block"
          >
            ← Back to League
          </Link>
          <h1 className="text-2xl font-bold text-gray-900">Generate Schedule</h1>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
        {/* Messages */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-800 rounded-lg p-4 mb-6">
            {error}
          </div>
        )}
        {success && (
          <div className="bg-green-50 border border-green-200 text-green-800 rounded-lg p-4 mb-6">
            {success}
          </div>
        )}

        {/* Configuration */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4">Schedule Configuration</h2>

          <div className="space-y-4 mb-6">
            <div>
              <p className="text-sm text-gray-600 mb-2">
                Teams in league: <strong>{teams.length}</strong>
              </p>
            </div>

            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={doubleRoundRobin}
                  onChange={(e) => setDoubleRoundRobin(e.target.checked)}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="ml-3 text-sm font-semibold text-gray-900">
                  Double Round-Robin (each team plays each other twice)
                </span>
              </label>
            </div>

            <div>
              <label htmlFor="startDate" className="block text-sm font-semibold text-gray-900 mb-2">
                Season Start Date *
              </label>
              <input
                type="date"
                id="startDate"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div>
              <label className="flex items-start mb-4">
                <input
                  type="checkbox"
                  checked={randomizeCourses}
                  onChange={(e) => setRandomizeCourses(e.target.checked)}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 mt-1"
                />
                <div className="ml-3">
                  <span className="text-sm font-semibold text-gray-900">Randomize Course per Week</span>
                  <p className="text-xs text-gray-500">
                    Each week will play at a randomly selected course. Everyone plays the same course each week.
                  </p>
                </div>
              </label>

              {!randomizeCourses && (
                <>
                  <label htmlFor="course" className="block text-sm font-semibold text-gray-900 mb-2">
                    Course *
                  </label>
                  <select
                    id="course"
                    value={courseId}
                    onChange={(e) => setCourseId(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select course...</option>
                    {courses.map((course) => (
                      <option key={course.id} value={course.id}>
                        {course.name} (Par {course.par}) - {course.location}
                      </option>
                    ))}
                  </select>
                </>
              )}
            </div>

            <div>
              <label htmlFor="holes_to_play" className="block text-sm font-semibold text-gray-900 mb-2">
                Holes to Play *
              </label>
              <select
                id="holes_to_play"
                value={holesToPlay}
                onChange={(e) => setHolesToPlay(parseInt(e.target.value))}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="18">18 Holes</option>
                <option value="9">9 Holes</option>
              </select>
            </div>

            {holesToPlay === 9 && (
              <div>
                <label htmlFor="nine_selection" className="block text-sm font-semibold text-gray-900 mb-2">
                  Which Nine? *
                </label>
                <select
                  id="nine_selection"
                  value={nineSelection}
                  onChange={(e) => setNineSelection(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="front">Front 9 (Holes 1-9)</option>
                  <option value="back">Back 9 (Holes 10-18)</option>
                </select>
              </div>
            )}

            <div>
              <label htmlFor="tee_selection" className="block text-sm font-semibold text-gray-900 mb-2">
                Tee Selection *
              </label>
              <select
                id="tee_selection"
                value={teeSelection}
                onChange={(e) => setTeeSelection(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="Black">Black Tees</option>
                <option value="Gold">Gold Tees</option>
                <option value="Blue">Blue Tees (Default)</option>
                <option value="White">White Tees</option>
                <option value="Red">Red Tees</option>
              </select>
            </div>
          </div>

          <button
            onClick={handleGenerate}
            disabled={isGenerating}
            className="w-full px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isGenerating ? 'Generating...' : 'Generate Schedule'}
          </button>
        </div>

        {/* Generated Schedule Preview */}
        {generatedSchedule.length > 0 && (
          <>
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <h2 className="text-xl font-bold text-gray-900 mb-4">
                Schedule Preview ({generatedSchedule.length} matches)
              </h2>

              <div className="space-y-6 max-h-96 overflow-y-auto">
                {Object.keys(matchesByWeek)
                  .sort((a, b) => Number(a) - Number(b))
                  .map((weekNum) => {
                    const weekMatches = matchesByWeek[Number(weekNum)];
                    const weekCourseId = weekMatches[0]?.course_id;
                    const weekCourse = courses.find(c => c.id === weekCourseId);

                    return (
                      <div key={weekNum}>
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="text-lg font-semibold text-gray-900">
                            Week {weekNum}
                          </h3>
                          {weekCourse && (
                            <span className="text-sm text-gray-600 bg-blue-50 px-3 py-1 rounded-full">
                              {weekCourse.name}
                            </span>
                          )}
                        </div>
                        <div className="space-y-2">
                          {weekMatches.map((match, idx) => (
                            <div
                              key={idx}
                              className="p-3 bg-gray-50 rounded-lg flex justify-between items-center"
                            >
                              <span className="text-gray-900">
                                {match.team1_name} vs {match.team2_name}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>

            <button
              onClick={handleSubmit}
              disabled={isSubmitting || !startDate}
              className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? 'Creating Matches...' : 'Create Schedule'}
            </button>
          </>
        )}
      </main>
    </div>
  );
}
